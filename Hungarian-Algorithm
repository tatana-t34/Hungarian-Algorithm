import tkinter as tk
import numpy as np
from scipy.optimize import linear_sum_assignment

def create_matrix():
    global matrix_entries, button_solve
    rows = int(entry_rows.get()) #Получаем кол-во строк из поля ввода
    cols = int(entry_cols.get()) #Получаем кол-во столбцов из поля ввода
    
    matrix_entries = [] #Создаем список для хранения вводимых значений
    for i in range(rows):
        row = [] #Создаем список для хранения значений строки
        for j in range(cols):
            entry = tk.Entry(root, width=5) #Создаем поле ввода для каждой ячейки матрицы
            entry.grid(row=i+7, column=j) #Размещаем поле ввода на форме(окне)
            row.append(entry) #Добавляем поле ввода в список значений строки
        matrix_entries.append(row) #Добавляем список значений строки в общий список матрицы
    
    button_solve = tk.Button(root, text="Сохранить значения матрицы!", command=solve_assignment) # Создаем кнопку для сохранения значений матрицы
    button_solve.grid(row=rows+10, columnspan=1) #Размещаем кнопку на форме


def solve_assignment():
    table_entries = [] #Создаем пустой список для хранения значений матрицы
    for row in matrix_entries:
        table_entries.append([int(entry.get()) for entry in row]) # Получаем значения из полей ввода и добавляем их в список
    table = np.array(table_entries) #Преобразуем список значений в массив numpy
    
    aspiration_label = tk.Label(root, text="К чему стремиться функция? (max/min): ") #Создаем метку для ввода типа задачи (максимизация/минимизация)
    aspiration_label.grid(row=len(matrix_entries)+15, column=0) #Размещаем поле ввода на форме
    
    aspiration_entry = tk.Entry(root) #Создаем поле ввода для выбора типа задачи
    aspiration_entry.grid(row=len(matrix_entries)+15, column=1) #Размещаем поле ввода на форме

    def assignment_maximize(table):
        # Максимизация: умножаем значения на -1, чтобы искать минимум
        neg_table = -table
        row_ind, col_ind = linear_sum_assignment(neg_table)  #Решаем задачу минимизации с помощью библиотечной функции
        # Возвращаем инвертированные индексы для получения максимального соответствия
        return row_ind, col_ind, -neg_table[row_ind, col_ind].sum()
    
    def solve_aspiration():
        aspiration = aspiration_entry.get() #Получаем выбранный тип задачи
        if aspiration == "max":
            row_ind, col_ind, max_value = assignment_maximize(table)
            result_label = tk.Label(root, text=f"Значение целевой функции L: {max_value}")
            result_label.grid(row=len(matrix_entries)+27, columnspan=1)
            assignments_label = tk.Label(root, text=f"Искомые назначения: {list(zip(row_ind + 1, col_ind + 1))}")
            assignments_label.grid(row=len(matrix_entries)+29, columnspan=1)
            # answer = tk.answer(root, text="Индексация строк и столб")
        else:
            row_ind, col_ind = linear_sum_assignment(table)
            result_label = tk.Label(root, text=f"Значение целевой функции L: {table[row_ind, col_ind].sum()}")
            result_label.grid(row=len(matrix_entries)+27, columnspan=1)
            assignments_label = tk.Label(root, text=f"Искомые назначения: {list(zip(row_ind + 1, col_ind + 1))}")
            assignments_label.grid(row=len(matrix_entries)+29, columnspan=1)
    
    solve_button = tk.Button(root, text="Получить ответ", command=solve_aspiration)
    solve_button.grid(row=len(matrix_entries)+20, columnspan=1)

root = tk.Tk() #Создаем основное окно приложения
root.title("Решение классических задач о назначениях") #Устанавливаем заголовок окна
root.geometry('700x500') #Устанавливаем размеры

label_rows = tk.Label(root, text="Введите количество строк:")
label_rows.grid(row=0, column=0)
entry_rows = tk.Entry(root)
entry_rows.grid(row=0, column=1)

label_cols = tk.Label(root, text="Введите количество столбцов:")
label_cols.grid(row=1, column=0)
entry_cols = tk.Entry(root)
entry_cols.grid(row=1, column=1)

button_create = tk.Button(root, text="Создать матрицу", command=create_matrix)
button_create.grid(row=3, columnspan=1)

root.mainloop() #Запускаем главный цикл приложения
